// Strings

////////////////////////////////////////////////////////////////////
// 1 - Palindrome Check
////////////////////////////////////////////////////////////////////

// RECURSIVE:
function isPalindrome(string, i = 0) {
  const j = string.length - 1 - i;
  return i >= j ? true : string[i] === string[j] && isPalindrome(string, i + 1);
}

// TWO POINTERS:
function isPalindrome(string) {
  let leftIdx = 0;
  let rightIdx = string.length - 1;

  while (leftIdx < rightIdx) {
    if (string[leftIdx] !== string[rightIdx]) return false;
    leftIdx++;
    rightIdx--;
  }
  return true;
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// 1 - Caesar Cipher Encryptor
////////////////////////////////////////////////////////////////////

function caesarCipherEncryptor(string, key) {
  const newLetters = [];
  const newKey = key % 26;

  for (const letter of string) {
    newLetters.push(getNewLetter(letter, newKey));
  }
  return newLetters.join('');
}

function getNewLetter(letter, newKey) {
  const newLetterCode = letter.charCodeAt() + newKey;
  return newLetterCode <= 122
    ? String.fromCharCode(newLetterCode)
    : String.fromCharCode(96 + (newLetterCode % 122));
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// 6 - Longest Palindromic Substring
////////////////////////////////////////////////////////////////////

function longestPalindromicSubstring(string) {
  let current = [0, 1];

  for (let i = 1; i < string.length; i++) {
    const odd = getLongestPalindromeFrom(string, i - 1, i + 1);
    const even = getLongestPalindromeFrom(string, i - 1, i);
    const longest = odd[1] - odd[0] > even[1] - even[0] ? odd : even;
    current =
      current[1] - current[0] > longest[1] - longest[0] ? current : longest;
  }
  return string.slice(current[0], current[1]);
}

function getLongestPalindromeFrom(string, leftIndex, rightIndex) {
  while (leftIndex >= 0 && rightIndex < string.length) {
    if (string[leftIndex] !== string[rightIndex]) break;
    leftIndex--;
    rightIndex++;
  }
  return [leftIndex + 1, rightIndex];
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
