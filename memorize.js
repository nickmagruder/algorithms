// Memorization List

////////////////////////////////////////////////////////////////////
// ARRAYS
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// STRINGS
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// LINKED LISTS
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// STACKS
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// QUEUES
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// BINARY TREES
////////////////////////////////////////////////////////////////////

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class Tree {
  constructor() {
    this.root = null;
  }

  //////// Depth-First Pre-Order RECURSIVE ///////
  PreOrder() {
    let data = [];

    function traverse(node) {
      data.push(node.value);

      if (node.left) traverse(node.left);
      if (node.right) traverse(node.right);
    }

    traverse(this.root);
    return data;
  }
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// BINARY SEARCH TREES
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// GRAPHS
////////////////////////////////////////////////////////////////////

class Graph {
  constructor() {
    this.adjacencyList = {};
  }

  addVertex(vertex) {
    if (!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];
  }

  addEdge(v1, v2) {
    this.adjacencyList[v1].push(v2);
    this.adjacencyList[v2].push(v1);
  }

  removeEdge(vertex1, vertex2) {
    this.adjacencyList[vertex1] = this.adjacencyList[vertex1].filter(
      (v) => v !== vertex2
    );
    this.adjacencyList[vertex2] = this.adjacencyList[vertex2].filter(
      (v) => v !== vertex1
    );
  }

  removeVertex(vertex) {
    while (this.adjacencyList[vertex].length) {
      const neighbor = this.adjacencyList[vertex].pop();
      this.removeEdge(vertex, neighbor);
    }
    delete this.adjacencyList[vertex];
  }

  depthFirstRecursive(start) {
    const result = [];
    const visited = {};
    const adjacencyList = this.adjacencyList;

    (function dfs(vertex) {
      if (!vertex) return null;

      visited[vertex] = true;
      result.push(vertex);

      adjacencyList[vertex].forEach((neighbor) => {
        if (!visited[neighbor]) {
          return dfs(neighbor);
        }
      });
    })(start);

    return result;
  }

  breadthFirst(start) {
    const queue = [start];
    const result = [];
    const visited = {};
    let currentVertex;
    visited[start] = true;

    while (queue.length) {
      currentVertex = queue.shift();
      result.push(currentVertex);

      this.adjacencyList[currentVertex].forEach((neighbor) => {
        if (!visited[neighbor]) {
          visited[neighbor] = true;
          queue.push(neighbor);
        }
      });
    }
    return result;
  }
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// HASH
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// HEAPS
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// SORTING
////////////////////////////////////////////////////////////////////

function merge(arr1, arr2) {
  let results = [];
  let i = 0;
  let j = 0;

  while (i < arr1.length && j < arr2.length) {
    if (arr2[j] > arr1[i]) {
      results.push(arr1[i]);
      i++;
    } else {
      results.push(arr2[j]);
      j++;
    }
  }

  while (i < arr1.length) {
    results.push(arr1[i]);
    i++;
  }

  while (j < arr2.length) {
    results.push(arr2[j]);
    j++;
  }

  return results;
}

// Recrusive Merge Sort
function mergeSort(arr) {
  if (arr.length <= 1) return arr;

  let mid = Math.floor(arr.length / 2);

  let left = mergeSort(arr.slice(0, mid));
  let right = mergeSort(arr.slice(mid));

  return merge(left, right);
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// SEARCHING
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// DYNAMIC PROGRAMMING
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// FAMOUS ALGOS
////////////////////////////////////////////////////////////////////
