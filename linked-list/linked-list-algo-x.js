////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// 1- Remove Dupes (from a sorted Linked List)
////////////////////////////////////////////////////////////////////

class LinkedList {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}

function removeDupes(linkedList) {
  let currentNode = linkedList;

  while (currentNode !== null) {
    let nextNode = currentNode.next;

    while (nextNode !== null && nextNode.value === currentNode.value) {
      nextNode = nextNode.next;
    }

    currentNode.next = nextNode;
    currentNode = nextNode;
  }
  return linkedList;
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// 6 - Reverse a Linked List
////////////////////////////////////////////////////////////////////

class LinkedList {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}

function reverseList(head) {
  let prevNode = null;

  while (head) {
    let nextNode = head.next;
    head.next = prevNode;
    prevNode = head;
    head = nextNode;
  }

  return prevNode;
}
